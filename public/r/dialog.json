{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "title": "Dialog",
  "author": "Rushil Dhinoja",
  "description": "A pop-up layered above the application window or dialog, which makes the background content inert.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/molecule-ui/dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype DialogContextType = {\n  open: boolean\n  animated: boolean\n}\n\nconst DialogContext = React.createContext<DialogContextType | undefined>(\n  undefined,\n)\n\nconst useDialog = (): DialogContextType => {\n  const context = React.useContext(DialogContext)\n  if (!context) {\n    throw new Error(\"useDialog must be used within a Dialog\")\n  }\n  return context\n}\n\nfunction Dialog({\n  children,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  animated = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root> & { animated?: boolean }) {\n  const [_open, _setOpen] = React.useState(false)\n\n  const open = openProp ?? _open\n\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n    },\n    [setOpenProp, open],\n  )\n\n  const contextValue = React.useMemo<DialogContextType>(\n    () => ({ open, animated }),\n    [open, animated],\n  )\n\n  return (\n    <DialogContext.Provider value={contextValue}>\n      <DialogPrimitive.Root\n        data-slot=\"dialog\"\n        {...props}\n        onOpenChange={setOpen}\n      >\n        {children}\n      </DialogPrimitive.Root>\n    </DialogContext.Provider>\n  )\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  animated = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay> & {\n  animated?: boolean\n}) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80\",\n        className,\n      )}\n      asChild\n      {...props}\n    >\n      <motion.div\n        key=\"dialog-overlay\"\n        initial={animated ? { opacity: 0, filter: \"blur(4px)\" } : {}}\n        animate={animated ? { opacity: 1, filter: \"blur(0px)\" } : {}}\n        exit={animated ? { opacity: 0, filter: \"blur(4px)\" } : {}}\n        transition={animated ? { duration: 0.2, ease: \"easeInOut\" } : {}}\n      />\n    </DialogPrimitive.Overlay>\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  const { open, animated } = useDialog()\n\n  return (\n    <AnimatePresence>\n      {open && (\n        <DialogPortal forceMount data-slot=\"dialog-portal\">\n          <DialogOverlay animated={animated} />\n          <DialogPrimitive.Content asChild forceMount {...props}>\n            <motion.div\n              key=\"dialog-content\"\n              data-slot=\"dialog-content\"\n              initial={\n                animated\n                  ? {\n                      opacity: 0,\n                      filter: \"blur(4px)\",\n                      transform: `perspective(500px) rotateY(30deg) scale(0.8)`,\n                    }\n                  : {}\n              }\n              animate={\n                animated\n                  ? {\n                      opacity: 1,\n                      filter: \"blur(0px)\",\n                      transform: `perspective(500px) rotateY(0deg) scale(1)`,\n                    }\n                  : {}\n              }\n              exit={\n                animated\n                  ? {\n                      opacity: 0,\n                      filter: \"blur(4px)\",\n                      transform: `perspective(500px) rotateY(30deg) scale(0.8)`,\n                    }\n                  : {}\n              }\n              className={cn(\n                \"bg-primary-foreground fixed top-[50%] left-[50%] z-50 grid w-[calc(100%-2rem)] max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 rounded-xl border p-4\",\n                className,\n              )}\n              transition={\n                animated ? { type: \"spring\", stiffness: 150, damping: 25 } : {}\n              }\n            >\n              {children}\n              {showCloseButton && (\n                <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:pointer-events-none\">\n                  <X className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Close</span>\n                </DialogPrimitive.Close>\n              )}\n            </motion.div>\n          </DialogPrimitive.Content>\n        </DialogPortal>\n      )}\n    </AnimatePresence>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\n        \"flex flex-col space-y-1.5 text-center sm:text-left\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 border-t pt-4 sm:flex-row sm:justify-end\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\n        \"mb-2.5 leading-none font-semibold tracking-tight\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "type": "registry:ui",
      "target": "components/molecule-ui/dialog.tsx"
    }
  ]
}