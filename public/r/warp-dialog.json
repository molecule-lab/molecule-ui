{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "warp-dialog",
  "type": "registry:ui",
  "title": "Warp Dialog",
  "author": "Rushil Dhinoja",
  "description": "A visually striking dialog component with 3D warp animations and smooth transitions. Features perspective transformations, animated backgrounds, and spring-based motion effects for an immersive user experience.",
  "dependencies": [
    "motion",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/molecule-ui/warp-dialog.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Props for the WarpDialog component\n */\nexport interface WarpDialogProps {\n  /** Whether the dialog is open */\n  open?: boolean\n  /** Callback function called when the dialog's open state changes */\n  onOpenChange?: (open: boolean) => void\n}\n\ntype WarpDialogContextType = {\n  open: boolean\n  setOpen: (open: boolean | ((prev: boolean) => boolean)) => void\n}\n\nconst WarpDialogContext = React.createContext<WarpDialogContextType | null>(\n  null,\n)\n\nexport function useWarpDialogContext() {\n  const ctx = React.useContext(WarpDialogContext)\n  if (!ctx)\n    throw new Error(\"WarpDialog components must be used inside <WarpDialog>\")\n  return ctx\n}\n\nexport function WarpDialog({\n  open: openProp,\n  onOpenChange: setOpenProp,\n  ...props\n}: React.ComponentProps<\"div\"> & WarpDialogProps) {\n  const [_open, _setOpen] = React.useState(false)\n  const open = openProp ?? _open\n\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n    },\n    [setOpenProp, open],\n  )\n\n  const contextValue = React.useMemo<WarpDialogContextType>(\n    () => ({ open, setOpen }),\n    [open, setOpen],\n  )\n\n  return (\n    <WarpDialogContext.Provider value={contextValue}>\n      <div data-slot=\"dialog\" {...props} />\n    </WarpDialogContext.Provider>\n  )\n}\n\nexport function WarpDialogTrigger({\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  const { setOpen } = useWarpDialogContext()\n\n  return (\n    <Comp\n      onClick={() => setOpen((prev) => !prev)}\n      data-slot=\"dialog-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction WarpDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-red-500/10\",\n        className,\n      )}\n      {...props}\n    >\n      <WarpAnimations />\n    </div>\n  )\n}\n\nexport function WarpDialogContent({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof motion.div>) {\n  const { open, setOpen } = useWarpDialogContext()\n\n  return (\n    <AnimatePresence>\n      {open && (\n        <div className={cn(\"absolute\")}>\n          <WarpDialogOverlay />\n\n          <motion.div\n            onClick={() => setOpen((prev) => !prev)}\n            className=\"fixed inset-0 flex items-center justify-center z-[1000]\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.35, ease: [0.59, 0, 0.35, 1] }}\n            {...props}\n          >\n            <motion.div\n              className=\"relative flex flex-col items-center justify-center gap-4\"\n              onClick={(e) => e.stopPropagation()}\n              initial={{\n                rotateX: -5,\n                skewY: -1.5,\n                scaleY: 2,\n                scaleX: 0.4,\n                y: 100,\n              }}\n              animate={{\n                rotateX: 0,\n                skewY: 0,\n                scaleY: 1,\n                scaleX: 1,\n                y: 0,\n                transition: {\n                  duration: 0.35,\n                  ease: [0.59, 0, 0.35, 1],\n                  y: { type: \"spring\", visualDuration: 0.7, bounce: 0.2 },\n                },\n              }}\n              exit={{\n                rotateX: -5,\n                skewY: -1.5,\n                scaleY: 2,\n                scaleX: 0.4,\n                y: 100,\n              }}\n              transition={{ duration: 0.35, ease: [0.59, 0, 0.35, 1] }}\n              style={{\n                transformPerspective: 1000,\n                originX: 0.5,\n                originY: 0,\n              }}\n            >\n              {children}\n            </motion.div>\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  )\n}\n\nfunction WarpAnimations() {\n  const enterDuration = 0.5\n  const exitDuration = 0.25\n  return (\n    <>\n      <motion.div\n        className=\"absolute rounded-full h-1/2 w-1/2 blur-lg origin-center will-change-transform left-[25%] top-[100%]\"\n        initial={{\n          scale: 0,\n          opacity: 1,\n          backgroundColor: \"hsl(10, 64%, 77%)\",\n        }}\n        animate={{\n          scale: 10,\n          opacity: 0.2,\n          backgroundColor: \"hsl(6, 93%, 56%)\",\n          transition: {\n            duration: enterDuration,\n            opacity: { duration: enterDuration, ease: \"easeInOut\" },\n          },\n        }}\n        exit={{\n          scale: 0,\n          opacity: 1,\n          backgroundColor: \"hsl(10, 64%, 77%)\",\n          transition: { duration: exitDuration },\n        }}\n      />\n      <motion.div\n        className=\" absolute blur-[100px] rounded-full bg-red-500/90 h-full w-full top-[-25%] left-[-50%]\"\n        initial={{ opacity: 0 }}\n        animate={{\n          opacity: 0.9,\n          transition: {\n            duration: enterDuration,\n            scale: {\n              duration: 15,\n              repeat: Infinity,\n              repeatType: \"loop\",\n              ease: \"easeInOut\",\n              delay: 0.35,\n            },\n          },\n          scale: [1, 0.7, 1],\n        }}\n        exit={{\n          opacity: 0,\n          transition: { duration: exitDuration },\n        }}\n      />\n      <motion.div\n        className=\" absolute blur-[100px] rounded-full bg-red-500/80 w-full h-full top-[25%] left-[50%]\"\n        initial={{ opacity: 0 }}\n        animate={{\n          opacity: 0.9,\n          transition: {\n            duration: enterDuration,\n            scale: {\n              duration: 15,\n              repeat: Infinity,\n              repeatType: \"loop\",\n              ease: \"easeInOut\",\n              delay: 0.35,\n            },\n          },\n          scale: [1, 0.7, 1],\n        }}\n        exit={{\n          opacity: 0,\n          transition: { duration: exitDuration },\n        }}\n      />\n    </>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/molecule-ui/warp-dialog.tsx"
    }
  ]
}