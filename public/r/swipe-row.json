{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "swipe-row",
  "type": "registry:ui",
  "title": "Swipe Row",
  "author": "Rushil Dhinoja",
  "description": "A swipe row for providing actions of swipe of left and right",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/molecule-ui/swipe-row.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { HTMLMotionProps, motion, type PanInfo } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype SwipeRowContextType = {\n  dragX: number\n  setDragX: React.Dispatch<React.SetStateAction<number>>\n  actionRefLeft?: React.RefObject<HTMLDivElement | null>\n  actionRefRight?: React.RefObject<HTMLDivElement | null>\n  handleDrag: (_: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => void\n  handleDragEnd: (\n    _: MouseEvent | TouchEvent | PointerEvent,\n    info: PanInfo,\n  ) => void\n}\n\nconst DRAG_THRESHOLD = 100\nconst ACTIONS_VIEW_THRESHOLD = 50\n\nconst SwipeRowContext = React.createContext<SwipeRowContextType | null>(null)\n\nexport function useSwipeRowContext() {\n  const ctx = React.useContext(SwipeRowContext)\n  if (!ctx)\n    throw new Error(\"Swipe Row components must be used inside <SwipeRow>\")\n  return ctx\n}\n\nexport function SwipeRow({ className, children }: React.ComponentProps<\"div\">) {\n  const [dragX, setDragX] = React.useState<number>(0)\n\n  const actionRefLeft = React.useRef<HTMLDivElement>(null)\n  const actionRefRight = React.useRef<HTMLDivElement>(null)\n\n  const handleDragEnd = React.useCallback(\n    (_: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\n      const absoluteOffset = Math.abs(info.offset.x)\n\n      if (\n        actionRefLeft.current &&\n        absoluteOffset > DRAG_THRESHOLD &&\n        info.offset.x > 0\n      ) {\n        setDragX(actionRefLeft.current.offsetWidth)\n      } else if (\n        actionRefRight.current &&\n        absoluteOffset > DRAG_THRESHOLD &&\n        info.offset.x < 0\n      ) {\n        setDragX(-actionRefRight.current.offsetWidth)\n      } else {\n        setDragX(0)\n      }\n    },\n    [],\n  )\n\n  const handleDrag = React.useCallback(\n    (_: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\n      setDragX(info.offset.x)\n    },\n    [],\n  )\n\n  const contextValue = React.useMemo<SwipeRowContextType>(\n    () => ({\n      dragX,\n      setDragX,\n      actionRefLeft,\n      actionRefRight,\n      handleDrag,\n      handleDragEnd,\n    }),\n    [dragX, setDragX, actionRefLeft, actionRefRight, handleDrag, handleDragEnd],\n  )\n\n  return (\n    <SwipeRowContext.Provider value={contextValue}>\n      <div\n        role=\"group\"\n        aria-roledescription=\"swipe-row-list-item\"\n        aria-label=\"swipe-row-item\"\n        className={cn(\"relative w-full overflow-hidden\", className)}\n      >\n        {children}\n      </div>\n    </SwipeRowContext.Provider>\n  )\n}\n\nexport function SwipeRowContent({\n  children,\n  className,\n  ...props\n}: HTMLMotionProps<\"div\">) {\n  const { actionRefLeft, actionRefRight, dragX, handleDrag, handleDragEnd } =\n    useSwipeRowContext()\n\n  return (\n    <motion.div\n      aria-label=\"swipe-row-item-content\"\n      tabIndex={0}\n      className={cn(\n        \"relative cursor-grab p-4 select-none active:cursor-grabbing\",\n        className,\n      )}\n      drag=\"x\"\n      dragConstraints={{\n        left: actionRefLeft?.current\n          ? -actionRefLeft?.current?.offsetWidth || 0\n          : 0,\n        right: actionRefRight ? actionRefRight.current?.offsetWidth : 0,\n      }}\n      dragElastic={0.1}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      animate={{ x: dragX }}\n      transition={{ stiffness: 300 }}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nexport function SwipeLeftActions({\n  className,\n  children,\n  ...props\n}: HTMLMotionProps<\"div\">) {\n  const { actionRefLeft, dragX } = useSwipeRowContext()\n  return (\n    <motion.div\n      role=\"region\"\n      aria-label=\"left-actions\"\n      ref={actionRefLeft}\n      className={cn(\n        \"absolute top-0 left-0 flex h-full items-center\",\n        className,\n      )}\n      initial={{ opacity: 0 }}\n      animate={{\n        opacity: dragX > ACTIONS_VIEW_THRESHOLD && actionRefLeft ? 1 : 0,\n        x:\n          dragX > 0 && actionRefLeft\n            ? 0\n            : -(actionRefLeft?.current?.offsetWidth || 0),\n      }}\n      transition={{ stiffness: 300 }}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nexport function SwipeRightActions({\n  className,\n  children,\n  ...props\n}: HTMLMotionProps<\"div\">) {\n  const { actionRefRight, dragX } = useSwipeRowContext()\n  return (\n    <motion.div\n      role=\"region\"\n      aria-label=\"right-actions\"\n      ref={actionRefRight}\n      className={cn(\n        \"absolute top-0 right-0 flex h-full items-center\",\n        className,\n      )}\n      initial={{ opacity: 0 }}\n      animate={{\n        opacity: dragX < -ACTIONS_VIEW_THRESHOLD && actionRefRight ? 1 : 0,\n        x:\n          dragX < 0 && actionRefRight\n            ? 0\n            : actionRefRight?.current?.offsetWidth || 0,\n      }}\n      transition={{ stiffness: 300 }}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/molecule-ui/swipe-row.tsx"
    }
  ]
}