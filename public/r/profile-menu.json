{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "profile-menu",
  "type": "registry:ui",
  "title": "Profile Menu",
  "author": "Rushil Dhinoja",
  "description": "An animated collapsible profile menu component with smooth transitions and customizable content sections.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/molecule-ui/profile-menu.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst menuVariants = {\n  open: {\n    opacity: 1,\n    scale: 1,\n    pointerEvents: \"auto\" as const,\n  },\n  closed: {\n    opacity: 0,\n    scale: 0.95,\n    pointerEvents: \"none\" as const,\n  },\n}\n\nconst nameVariants = {\n  open: {\n    width: \"auto\",\n    opacity: 1,\n  },\n  closed: {\n    width: 0,\n    opacity: 0,\n  },\n}\n\ntype ProfileMenuContextType = {\n  open: boolean\n  setOpen: (open: boolean | ((prev: boolean) => boolean)) => void\n}\n\nconst ProfileMenuContext = React.createContext<ProfileMenuContextType | null>(\n  null,\n)\n\nexport function useProfileMenuContext() {\n  const ctx = React.useContext(ProfileMenuContext)\n  if (!ctx)\n    throw new Error(\"ProfileMenu components must be used inside <ProfileMenu>\")\n  return ctx\n}\n\nexport function ProfileMenu({\n  open: openProp,\n  onOpenChange: setOpenProp,\n  children,\n  className,\n  ...props\n}: HTMLMotionProps<\"div\"> & {\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const menuRef = React.useRef<HTMLDivElement>(null)\n  const [_open, _setOpen] = React.useState(false)\n  const open = openProp ?? _open\n\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n    },\n    [setOpenProp, open],\n  )\n\n  const contextValue = React.useMemo<ProfileMenuContextType>(\n    () => ({ open, setOpen }),\n    [open, setOpen],\n  )\n\n  React.useEffect(() => {\n    const handleClick = (e: MouseEvent) => {\n      if (\n        open &&\n        menuRef.current &&\n        !menuRef.current.contains(e.target as Node)\n      ) {\n        setOpen(false)\n      }\n    }\n\n    document.addEventListener(\"pointerdown\", handleClick)\n    return () => document.removeEventListener(\"pointerdown\", handleClick)\n  }, [open, setOpen])\n\n  return (\n    <ProfileMenuContext.Provider value={contextValue}>\n      <motion.div\n        ref={menuRef}\n        className={cn(\n          \"overflow-hidden rounded-md cursor-pointer absolute top-0 right-0 flex flex-col\",\n          open && \"bg-popover border\",\n          className,\n        )}\n        style={{ transformOrigin: \"top right\" }}\n        initial={{ width: \"auto\", height: \"auto\" }}\n        animate={{\n          width: open ? \"fit-content\" : \"auto\",\n          height: open ? \"fit-content\" : \"auto\",\n        }}\n        transition={{ duration: 0.2, ease: \"easeInOut\" }}\n        role=\"menu\"\n        aria-label=\"Profile menu\"\n        {...props}\n      >\n        {children}\n      </motion.div>\n    </ProfileMenuContext.Provider>\n  )\n}\n\nexport function ProfileMenuHeader({\n  children,\n  className,\n  ...props\n}: HTMLMotionProps<\"div\">) {\n  const { open } = useProfileMenuContext()\n  return (\n    <motion.div\n      className={cn(\"flex gap-2 items-center justify-between\", className)}\n      animate={{\n        padding: open ? \"0.5rem\" : 0,\n      }}\n      transition={{ duration: 0.2, ease: \"easeInOut\" }}\n      role=\"button\"\n      aria-label=\"Toggle profile menu\"\n      aria-expanded={open}\n      aria-haspopup=\"menu\"\n      tabIndex={0}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nexport function ProfileMenuTrigger({\n  children,\n  className,\n  ...props\n}: HTMLMotionProps<\"div\">) {\n  const { setOpen } = useProfileMenuContext()\n\n  return (\n    <motion.div\n      onClick={() => setOpen((prev) => !prev)}\n      className={cn(\"ml-auto\", className)}\n      style={{ transformOrigin: \"center right\" }}\n      role=\"button\"\n      aria-label=\"Profile menu trigger\"\n      tabIndex={0}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nexport function ProfileMenuHeaderContent({\n  children,\n  ...props\n}: HTMLMotionProps<\"div\">) {\n  const { open } = useProfileMenuContext()\n  return (\n    <motion.div\n      variants={nameVariants}\n      animate={open ? \"open\" : \"closed\"}\n      initial=\"closed\"\n      style={{\n        transformOrigin: \"top right\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n      }}\n      transition={{ duration: 0.1, ease: \"easeInOut\" }}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nexport function ProfileMenuContent({\n  className,\n  children,\n  ...props\n}: HTMLMotionProps<\"div\">) {\n  const { open, setOpen } = useProfileMenuContext()\n\n  return (\n    <AnimatePresence>\n      {open && (\n        <motion.div\n          onClick={() => setOpen((prev) => !prev)}\n          variants={menuVariants}\n          initial=\"closed\"\n          animate=\"open\"\n          exit=\"closed\"\n          style={{ transformOrigin: \"top right\" }}\n          className={cn(\"p-1\", className)}\n          transition={{ duration: 0.2, ease: \"easeInOut\" }}\n          role=\"menu\"\n          aria-label=\"Profile menu options\"\n          {...props}\n        >\n          {children}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n\nexport function ProfileMenuGroup({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      className={cn(\"flex flex-col gap-1\", className)}\n      role=\"group\"\n      aria-label=\"Menu group\"\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport function ProfileMenuItem({\n  children,\n  className,\n  ...props\n}: HTMLMotionProps<\"div\">) {\n  return (\n    <motion.div\n      className={cn(\n        \"flex items-center gap-3 px-1 py-1.5 text-sm hover:bg-accent rounded-md transition-colors cursor-pointer\",\n        className,\n      )}\n      transition={{ duration: 0.1, ease: \"easeInOut\" }}\n      role=\"menuitem\"\n      tabIndex={0}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/molecule-ui/profile-menu.tsx"
    }
  ]
}